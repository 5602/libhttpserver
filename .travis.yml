language: cpp
os:
 - linux
 - osx
 - windows
compiler: 
 - gcc
 - clang
env:
 - DEBUG="debug" COVERAGE="coverage"
 - DEBUG="nodebug" COVERAGE="nocoverage"
 - LINKING="static"
before_install:
 - eval "${MATRIX_EVAL}"
 - if [ "$TRAVIS_OS_NAME" != "windows" ]; then export LDFLAGS="$LDFLAGS -L/usr/local/lib -L/usr/lib"; fi
 - if [ "$TRAVIS_OS_NAME" != "windows" ]; then export PATH=$PATH:/usr/local/lib; fi
 - if [ "$TRAVIS_OS_NAME" != "windows" ]; then export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib; fi
 - if [ "$TRAVIS_OS_NAME" != "windows" ]; then export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/lib; fi
 - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install info install-info; fi
 - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo pip install codecov; fi
 - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo pip install gcovr; fi
 - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install cppcheck; fi
 - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export CFLAGS='-mtune=generic'; fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then
     curl https://s3.amazonaws.com/libhttpserver/travis_stuff/msys64.tar.gz -o msys64.tar.gz ;
     tar -xzf msys64.tar.gz ;
     rm msys64/usr/bin/cp.exe ;
     rm msys64/usr/bin/msys-2.0.dll ;
     rm msys64/usr/bin/msys-intl-8.dll ;
     rm msys64/usr/bin/msys-iconv-2.dll ;
     rm msys64/usr/bin/bash.exe ;
     rm /usr/bin/cmp.exe ;
     rm /usr/bin/diff.exe ;
     rm /usr/bin/diff3.exe ;
     rm /usr/bin/sdiff.exe ;
     rm /etc/profile.d/perlbin.csh ;
     rm /etc/profile.d/perlbin.sh ;
     rm /usr/bin/perl.exe ;
     rm -rf /usr/bin/core_perl/ ;
     rm -rf /usr/lib/perl5/core_perl/ ;
     rm /usr/share/fish/vendor_conf.d/perlbin.fish ;
     rm /usr/share/makepkg-template/perl-binary-module-dependency-1.template ;
     rm /usr/share/makepkg-template/perl-binary-module-dependency.template ;
     rm -rf /usr/share/perl5/core_perl/ ;
     rm /usr/bin/backup ;
     rm /usr/bin/restore ;
     rm /usr/bin/tar.exe ;
     rm /usr/lib/tar/backup.sh ;
     rm /usr/lib/tar/dump-remind ;
     rm /usr/lib/tar/rmt.exe ;
     cp -R msys64/* / ;
   fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then pacman-key --init; fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then pacman-key --populate msys2; fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then pacman-key --refresh-keys; fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then pacman -Syuu; fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then echo 'all' | pacman -S --needed --noconfirm autoconf autogen automake1.16 libtool pkg-config gnutls libgcrypt libgnutls; fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then pacman -Ql gnutls ; fi
 - if [ "$TRAVIS_OS_NAME" = "windows" ]; then pacman -Ql automake1.16 ; fi
 - curl https://s3.amazonaws.com/libhttpserver/libmicrohttpd_releases/libmicrohttpd-0.9.59.tar.gz -o libmicrohttpd-0.9.59.tar.gz
 - tar -xzf libmicrohttpd-0.9.59.tar.gz
 - cd libmicrohttpd-0.9.59
 - if [[ "$ARM_ARCH_DIR" != "" ]]; then
     ./configure --build `./config.guess` --host $ARM_ARCH_DIR --disable-examples;
   elif [[ "$TRAVIS_OS_NAME" = "windows" ]]; then
     ./configure --prefix=/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/x86_64-w64-mingw32/ --build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32 --disable-examples --enable-https --enable-shared --enable-static ;
   else
     ./configure --disable-examples;
   fi
 - make
 - sudo make install
 - cd ..
 - if [ "$BUILD_TYPE" = "asan" ]; then export CFLAGS='-fsanitize=address'; export CXXLAGS='-fsanitize=address'; export LDFLAGS='-fsanitize=address'; fi
 - if [ "$BUILD_TYPE" = "msan" ]; then export CFLAGS='-fsanitize=memory'; export CXXLAGS='-fsanitize=memory'; export LDFLAGS='-fsanitize=memory'; fi
 - if [ "$BUILD_TYPE" = "lsan" ]; then export CFLAGS='-fsanitize=leak'; export CXXLAGS='-fsanitize=leak'; export LDFLAGS='-fsanitize=leak'; fi
 - if [ "$BUILD_TYPE" = "tsan" ]; then export CFLAGS='-fsanitize=thread'; export CXXLAGS='-fsanitize=thread'; export LDFLAGS='-fsanitize=thread'; fi
 - if [ "$BUILD_TYPE" = "ubsan" ]; then export export CFLAGS='-fsanitize=undefined'; export CXXLAGS='-fsanitize=undefined'; export LDFLAGS='-fsanitize=undefined'; fi
install:
 - if [[ "$CROSS_COMPILE" == 1 ]] ; then
     if [[ "$ARM_ARCH_DIR" == "aarch64-linux-gnu" ]] ; then
       mkdir $HOME/linker_bin ;
       ln -s /usr/bin/aarch64-linux-gnu-ld $HOME/linker_bin/ld ;
       LD=$HOME/linker_bin/ld ;
       echo "SETTING GNU LINKER DIR" ;
       ls -al $HOME/linker_bin/ld ;
     fi
   fi
 - ./bootstrap
 - mkdir build
 - cd build
 - if [ "$LINKING" = "static" ]; then
     ../configure --enable-static --disable-fastopen;
   elif [ "$DEBUG" = "debug" ] && [ "$COVERAGE" = "coverage" ]; then
     ../configure --enable-debug --enable-coverage --disable-shared --disable-fastopen;
   elif [ "$DEBUG" = "debug" ]; then
     ../configure --enable-debug --disable-shared --disable-fastopen;
   elif [ "$CROSS_COMPILE" = "1" ] && [ "$ARM_ARCH_DIR" = "aarch64-linux-gnu" ]; then 
     ../configure --disable-fastopen --build `../config.guess` --host aarch64-linux-gnu CC="gcc -B$HOME/linker_bin" CXX="g++ -B$HOME/linker_bin";
   elif [ "$CROSS_COMPILE" = "1" ] && [ "$ARM_ARCH_DIR" = "arm-linux-gnueabi" ]; then 
     ../configure --disable-fastopen --build `../config.guess` --host arm-linux-gnueabi;
   elif [ "$VALGRIND" = "valgrind" ]; then
     ../configure --enable-debug --disable-fastopen --disable-valgrind-helgrind --disable-valgrind-drd --disable-valgrind-sgcheck;
   else
     ../configure --disable-fastopen;
   fi
 - if [ "$CROSS_COMPILE" = "1" ] && [ "$ARM_ARCH_DIR" = "aarch64-linux-gnu" ]; then sed -i 's+/usr/bin/ld+$HOME/linker_bin/ld+g' libtool; fi
 - if [ "$CROSS_COMPILE" = "1" ] && [ "$ARM_ARCH_DIR" = "aarch64-linux-gnu" ]; then sed -i 's+/usr/bin/ld+$HOME/linker_bin/ld+g' Makefile; fi
 - make
 - make check TESTS=
script:
 - if [[ "$CROSS_COMPILE" == 1 ]]; then
     cd test ;
     if [[ "$ARM_ARCH_DIR" == "aarch64-linux-gnu" ]]; then
       file ./.libs/basic;
       file ./.libs/http_utils;
       file ./.libs/threaded;

       qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./.libs/basic ;
       qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./.libs/http_utils ;
       qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./.libs/threaded ;
     else
       file ./.libs/basic;
       file ./.libs/http_utils;
       file ./.libs/threaded;

       qemu-arm -L /usr/arm-linux-gnueabi/ ./.libs/basic ;
       qemu-arm -L /usr/arm-linux-gnueabi/ ./.libs/http_utils ;
       qemu-arm -L /usr/arm-linux-gnueabi/ ./.libs/threaded ;
     fi
   fi
 - make check
 - cat test/test-suite.log
 - if [ "$VALGRIND" = "valgrind" ]; then make check-valgrind; fi;
 - if [ "$VALGRIND" = "valgrind" ]; then cat test/test-suite-memcheck.log; fi;
 - ls -l /usr/local/lib/
 - ls -l /usr/lib/
 - if [ "$TRAVIS_OS_NAME" = "linux" ]; then cd ../src/; cppcheck --error-exitcode=1 .; cd ../build; fi
 - |
   if [ "$PERFORMANCE" = "select" ]; then
    cd examples
    ./benchmark_select 8080 $(nproc) &
    sleep 5 && ab -n 10000000 -c 100 localhost:8080/plaintext
   fi
 - |
   if [ "$PERFORMANCE" = "threads" ]; then
    cd examples
    ./benchmark_threads 8080 &
    sleep 5 && ab -n 10000000 -c 100 localhost:8080/plaintext
   fi
after_success:
  - if [ "$DEBUG" = "debug" ] && [ "$COVERAGE" = "coverage" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then bash <(curl -s https://codecov.io/bash); fi
matrix:
  exclude:
    - compiler: clang
      env: DEBUG="debug" COVERAGE="coverage"
    - compiler: clang
      env: LINKING='static'
    - os: windows
      env: DEBUG="debug" COVERAGE="coverage"
    - os: windows
      env: LINKING='static'
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env: MATRIX_EVAL="BUILD_TYPE=asan && CC=clang-3.8 && CXX=clang++-3.8 && DEBUG=debug && COVERAGE=nocoverage"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env: MATRIX_EVAL="BUILD_TYPE=msan && CC=clang-3.8 && CXX=clang++-3.8 && DEBUG=debug && COVERAGE=nocoverage"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env: MATRIX_EVAL="BUILD_TYPE=lsan && CC=clang-3.8 && CXX=clang++-3.8 && DEBUG=debug && COVERAGE=nocoverage"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env: MATRIX_EVAL="BUILD_TYPE=tsan && CC=clang-3.8 && CXX=clang++-3.8 && DEBUG=debug && COVERAGE=nocoverage"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env: MATRIX_EVAL="BUILD_TYPE=ubsan && CC=clang-3.8 && CXX=clang++-3.8 && DEBUG=debug && COVERAGE=nocoverage"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
         - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env:
        - MATRIX_EVAL="CC=gcc-6 && CXX=g++-6"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
      env:
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - valgrind
            - valgrind-dbg
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && VALGRIND=valgrind"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - apache2-utils
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && PERFORMANCE=select"
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - apache2-utils
      env:
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && PERFORMANCE=threads"
    #- os: osx
    #  osx_image: xcode8
    #  env:
    #    - MATRIX_EVAL="CC=gcc-4.9 && CXX=g++-4.9"
    #- os: osx
    #  osx_image: xcode8
    #  env:
    #    - MATRIX_EVAL="brew install gcc5 && CC=gcc-5 && CXX=g++-5"
    #- os: osx
    #  osx_image: xcode8
    #  env:
    #    - MATRIX_EVAL="brew install gcc6 && CC=gcc-6 && CXX=g++-6"
    #- os: osx
    #  osx_image: xcode8
    #  env:
    #    - MATRIX_EVAL="brew install gcc && CC=gcc-7 && CXX=g++-7"
    # works on Precise and Trusty
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
          packages:
            - clang-3.6
      env:
        - MATRIX_EVAL="CC=clang-3.6 && CXX=clang++-3.6"
    # works on Precise and Trusty
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7
          packages:
            - clang-3.7
      env:
        - MATRIX_EVAL="CC=clang-3.7 && CXX=clang++-3.7"
    # works on Precise and Trusty
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - clang-3.8
      env:
        - MATRIX_EVAL="CC=clang-3.8 && CXX=clang++-3.8"
    # works on Trusty
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-3.9
          packages:
            - clang-3.9
      env:
        - MATRIX_EVAL="CC=clang-3.9 && CXX=clang++-3.9"
    # works on Trusty
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-4.0
          packages:
            - clang-4.0
      env:
        - MATRIX_EVAL="CC=clang-4.0 && CXX=clang++-4.0"
    # works on Trusty
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
      env:
        - MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-6.0
            - ubuntu-toolchain-r-test
          packages:
            - clang-6.0
      env:
        - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
    - os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-7
            - ubuntu-toolchain-r-test
          packages:
            - clang-7
      env:
        - MATRIX_EVAL="CC=clang-7 && CXX=clang++-7"
    - os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - clang-3.9
            - g++-arm-linux-gnueabi
            - g++-multilib
            - gcc-multilib
            - qemu
            - qemu-system-arm
      env: MATRIX_EVAL="CROSS_COMPILE=1 && ARM_ARCH_DIR=arm-linux-gnueabi && CC=arm-linux-gnueabi-gcc"
    - os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - clang-3.9
            - g++-4.8-aarch64-linux-gnu
            - gcc-4.8-aarch64-linux-gnu
            - g++-4.8-multilib
            - gcc-4.8-multilib
            - qemu
            - qemu-system-arm
      env: MATRIX_EVAL="CROSS_COMPILE=1 && ARM_LD_PATH=$HOME/linker_bin && ARM_ARCH_DIR=aarch64-linux-gnu"
  allow_failures:
    - env: MATRIX_EVAL="CROSS_COMPILE=1 && ARM_ARCH_DIR=arm-linux-gnueabi && CC=arm-linux-gnueabi-gcc"
    - env: MATRIX_EVAL="CROSS_COMPILE=1 && ARM_LD_PATH=$HOME/linker_bin && ARM_ARCH_DIR=aarch64-linux-gnu"
